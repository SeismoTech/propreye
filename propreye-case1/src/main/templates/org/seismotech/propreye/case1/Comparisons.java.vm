package org.seismotech.propreye.case1;

import java.util.Comparator;

#set($arithtypes = ["byte", "short", "char", "int", "long", "float", "double"])
#set($lowtypes = $jpp.concat(["boolean"], $arithtypes))
#set($cmpops = $jpp.table(
  ["name", "op", "iname", "iop"],
  ["lt", "<", "gt", ">"],
  ["le", "<=", "ge", ">="]
))

public class Comparisons {

  //----------------------------------------------------------------------
  // min and max values

  public static final boolean MIN_BOOLEAN = false;
  public static final boolean MAX_BOOLEAN = true;

  #foreach($type in $arithtypes)
    public static final $type MIN_${jpp.upcase($type)}
      = ${jpp.boxedType($type)}.MIN_VALUE;
    public static final $type MAX_${jpp.upcase($type)}
      = ${jpp.boxedType($type)}.MAX_VALUE;
  #end

  //----------------------------------------------------------------------
  //cmp

  #foreach($type in $lowtypes)
    public static int cmp($type a, $type b) {
      return ${jpp.boxedType($type)}.compare(a, b);
    }
  #end

  public static <T extends Comparable<T>> int cmp(T a, T b) {
    return (a == null)
      ? (b != null) ? -1 : 0
      : (b == null) ? 1 : a.compareTo(b);
  }

  public static <T> int cmp(Comparator<T> cmp, T a, T b) {
    return cmp.compare(a, b);
  }

  //----------------------------------------------------------------------
  // lt, le, ge, gt

  #foreach($op in $cmpops)

    #foreach($type in $arithtypes)
      public static boolean ${op.name}($type a, $type b) {
        return a ${op.op} b;
      }
    #end

    public static <T> boolean ${op.name}(Comparator<T> cmp, T a, T b) {
      return cmp(cmp, a, b) ${op.op} 0;
    }

    #foreach($type in $lowtypes)
      public static boolean ${op.iname}($type a, $type b) {
        return ${op.name}(b, a);
      }
    #end
    public static <T> boolean ${op.iname}(Comparator<T> cmp, T a, T b) {
      return ${op.name}(cmp, b, a);
    }
    public static <T extends Comparable<T>> boolean ${op.iname}(T a, T b) {
      return ${op.name}(b, a);
    }
  #end

  public static boolean lt(boolean a, boolean b) {
    return !a && b;
  }
  public static boolean le(boolean a, boolean b) {
    return !a || b;
  }

  public static <T extends Comparable<T>> boolean lt(T a, T b) {
    return b != null && (a == null || a.compareTo(b) < 0);
  }
  public static <T extends Comparable<T>> boolean le(T a, T b) {
    return a == null || (b != null && a.compareTo(b) <= 0);
  }

  //----------------------------------------------------------------------
  // min, max

  #foreach($type in $lowtypes)
    public static $type min($type a, $type b) {return le(a,b) ? a : b;}
    public static $type max($type a, $type b) {return ge(a,b) ? a : b;}
  #end

  public static <T extends Comparable<T>> T min(T a, T b) {
    return le(a,b) ? a : b;
  }
  public static <T extends Comparable<T>> T max(T a, T b) {
    return ge(a,b) ? a : b;
  }

  public static <T> T min(Comparator<T> cmp, T a, T b) {
    return le(cmp,a,b) ? a : b;
  }
  public static <T> T max(Comparator<T> cmp, T a, T b) {
    return ge(cmp,a,b) ? a : b;
  }
}
